/**
 * \file UAVTalk.h
 * \brief UAVTalk protocol definition
 * \author Manuel Deneu
 * \version 0.1
 * \date 17/12/2015
 *
 *  PUBLIC HEADER - global definitions for UAVTalk implementation.
 *  See https://github.com/TauLabs/TauLabs/wiki/Development-UAVTalk-Protocol
 *
 */


#ifndef UAVTalk_h
#define UAVTalk_h


#include <stdint.h>

/** The maximum data size an UAV Object can hold.
 *  \def UAV_DATA_MAX_SIZE
 */
#define UAV_DATA_MAX_SIZE 255

/**
 *  The UAVObject data structure.
 *  \struct UAV_Object
 */
struct UAV_Object
{
    uint8_t     sync; /*!< Always 0x3C */
    
    uint8_t     type; /*!< The object type \see UAV_Object_TYPE. Note: The most significant 4 bits indicate the protocol version (v2 current). */
    
    uint16_t    length; /*!< Not needed since object ID predicts this but useful for blind parsing. Length of header and data, not checksum. */

    uint32_t    objectID; /*!< Unique object ID (generated by parser, also used for framing and version control) */
    
    uint16_t    instanceID; /*!< Unique object instance ID. Only present in UAVObjects that are NOT of type 'single instance'*/

    uint16_t    timestamp; /*!< For packet types with the timestamp flag (0x80 set) this field will contain a two byte timestamp in milliseconds*/
    
    uint8_t     data[UAV_DATA_MAX_SIZE]; /*!<Serialized (packed) object. The length of data is inherent knowledge about that particular object's size as identified by ObjectID.*/
    
    uint8_t     checksum;     /*!<CRC-8 checksum*/
    
};


/**
 * The type of an UAVObject
 * \enum UAV_Object_TYPE
 *
 * \see field type in UAV_Object
 */
enum UAV_Object_TYPE
{
    Type_OBJ     = 0x20,    /*!< UAVObject type. */
    Type_OBJ_REQ = 0x21,    /*!< UAVObject request . */
    Type_OBJ_ACK = 0x22,    /*!< UAVObject needs acknowledge . */
    Type_ACK     = 0x23,    /*!< UAVObject acknowledge response . */
    Type_NACK    = 0x24,    /*!< UAVObject negative acknowledge response . */
    
    Type_TimeStamped = 0x80 /*!< UAVObject has a timestamp packet. */
};

typedef struct UAV_Object UAVObject;

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */

/**
 * \fn static inline void initUAVObject( UAVObject *obj)
 * \brief Initialize empty UAVObject instance
 *
 * Everything will be set to zero in order to prevent garbage values
 *
 * \param[in,out] obj must _not_ be NULL!
 */
static inline void initUAVObject( UAVObject *obj)
{
    obj->sync       = 0;
    obj->type       = 0;
    obj->length     = 0;
    obj->objectID   = 0;
    obj->instanceID = 0;
    obj->timestamp  = 0;
    obj->checksum   = 0;
    
    for ( uint16_t i = 0; i< UAV_DATA_MAX_SIZE; i++)
        obj->data[i] = 0;
    
}


static inline void createREQ( UAVObject *obj , uint32_t objectID )
{
    initUAVObject(obj);
    obj->type = Type_NACK;
    obj->objectID = objectID;
}

static inline void createNACK( UAVObject *obj , uint16_t instanceID )
{
    initUAVObject(obj);
    obj->type = Type_NACK;
    obj->instanceID = instanceID;
}

static inline void createACK( UAVObject *obj , uint16_t instanceID )
{
    initUAVObject(obj);
    obj->type = Type_ACK;
    obj->instanceID = instanceID;
}

static inline void dumbUAVObject( UAVObject *obj)
{
    obj->sync       = 1;
    obj->type       = 2;
    obj->length     = 3;
    obj->objectID   = 4;
    obj->instanceID = 5;
    obj->timestamp  = 6;
    obj->checksum   = 7;
    
    for ( uint16_t i = 0; i< UAV_DATA_MAX_SIZE; i++)
        obj->data[i] = (uint8_t )i;
    
}

/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */


/* **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** **** */
#endif /* UAVTalk_h */
