//
//  UAVProtocol.h
//  Dispatcher
//
//  Created by Manuel Deneu on 17/12/2015.
//  Copyright Â© 2015 Manuel Deneu. All rights reserved.
//

#ifndef UAVTalk_h
#define UAVTalk_h

/*
 PUBLIC HEADER
 
 global definitions for UAVTalk implementation.
 See https://github.com/TauLabs/TauLabs/wiki/Development-UAVTalk-Protocol

 */

#define UAV_DATA_MAX_SIZE 255

struct UAV_Object
{
    uint8_t     sync; // 0x3C
    
    /*Object (OBJ): 0x20, Object request (OBJ_REQ): 0x21, Object with acknowledge request (OBJ_ACK): 0x22, Acknowledge (ACK): 0x23, Negative-Acknowledge (NACK) : 0x24. If the flag 0x80 is present it indicates this is a timestamped packet. Note: The most significant 4 bits indicate the protocol version (v2 current). */
    uint8_t     type;
    
    /*Not needed since object ID predicts this but useful for blind parsing. Length of header and data, not checksum.*/
    uint16_t    length;
    
    /*Unique object ID (generated by parser, also used for framing and version control)*/
    uint32_t    objectID;
    
    /*Unique object instance ID. Only present in UAVObjects that are NOT of type 'single instance'*/
    uint16_t    instanceID;
    
    /*For packet types with the timestamp flag (0x80 set) this field will contain a two byte timestamp in milliseconds*/
    uint16_t    timestamp;
    
    /*Serialized (packed) object. The length of data is inherent knowledge about that particular object's size as identified by ObjectID.*/
    uint8_t     data[UAV_DATA_MAX_SIZE];
    
    /*CRC-8 checksum*/
    uint8_t     checksum;
    
};

enum UAV_Object_TYPE
{
    Type_OBJ     = 0x20,
    Type_OBJ_REQ = 0x21,
    Type_OBJ_ACK = 0x22,
    Type_ACK     = 0x23,
    Type_NACK    = 0x24,
    
    Type_TimeStamped = 0x80
};

typedef struct UAV_Object UAVObject;


//! \brief Initialize empty UAVObject instance
/*!
    Everything will be set to zero in order to prevent garbage values
 
    \param obj must _not_ be NULL!
 */
static inline void initUAVObject( UAVObject *obj)
{
    obj->sync = 0;
    obj->type = 0;
    obj->length = 0;
    obj->objectID = 0;
    obj->instanceID = 0;
    obj->timestamp = 0;
    obj->checksum = 0;
    
    for ( uint16_t i = 0; i< UAV_DATA_MAX_SIZE; i++)
        obj->data[i] = 0;
    
    
}

#endif /* UAVTalk_h */
